// Copied from urls below with minor changes to account for different project
//credit: https://github.com/spring-guides/gs-producing-web-service/blob/master/complete/build.gradle
//credit: https://spring.io/guides/gs/producing-web-service/

plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'java-library'
}

apply plugin: "maven"


group = 'edu.umich.ropierce'
sourceCompatibility = '11'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
	jaxb
}

repositories {
	mavenCentral()
}

task genJaxb {
	ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
	ext.classesDir = "${buildDir}/classes/jaxb"
	ext.schema = "src/main/resources/journal.xsd"

	outputs.dir classesDir

	doLast() {
		project.ant {
			taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
					classpath: configurations.jaxb.asPath
			mkdir(dir: sourcesDir)
			mkdir(dir: classesDir)

			xjc(destdir: sourcesDir, schema: schema) {
				arg(value: "-wsdl")
				produces(dir: sourcesDir, includes: "**/*.java")
			}

			javac(destdir: classesDir, source: 11, target: 11, debug: true,
					debugLevel: "lines,vars,source", includeantruntime: false,
					classpath: configurations.jaxb.asPath) {
				src(path: sourcesDir)
				include(name: "**/*.java")
				include(name: "*.java")
			}

			copy(todir: classesDir) {
				fileset(dir: sourcesDir, erroronmissingdir: false) {
					exclude(name: "**/*.java")
				}
			}
		}
	}
}

dependencies {
	// spring boot
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// dev tools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// mysql
	runtimeOnly 'mysql:mysql-connector-java'

	// https://mvnrepository.com/artifact/jakarta.xml.bind/jakarta.xml.bind-api
	compile group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '2.3.2'

	// https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime
	compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.4.0-b180830.0438'

	// soap / jaxb
	implementation 'wsdl4j:wsdl4j:1.6.1'
	jaxb("org.glassfish.jaxb:jaxb-xjc:2.2.11")
	compile(files(genJaxb.classesDir).builtBy(genJaxb))

	// test
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'com.h2database:h2'
}

compileJava.dependsOn 'genJaxb'

jar {
	from genJaxb.classesDir
}

//bootJar {
//	baseName = 'gs-producing-web-service'
//	version =  '0.1.0'
//}

test {
	useJUnitPlatform()
}
